package com.ayush.ztrainingspring.photos;

import com.ayush.ztrainingspring.user_auth.User;
import com.ayush.ztrainingspring.user_auth.UserRepository;
import com.ayush.ztrainingspring.user_auth.UserService;
import org.apache.commons.io.IOUtils;
import org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream;
// import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;


@CrossOrigin(origins = "*")
@RestController
@RequestMapping(path="/photos") // This means URL's start with /photos (after Application path)
public class PhotosController {

    // private static String UPLOADED_FOLDER = "src/main/resources/photos_storage/";
    private static String UPLOADED_FOLDER = "photos_storage/";

    @Autowired // This means to get the bean called PhotosRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PhotosRepository photosRepository;
    @Autowired
    private UserRepository userRepository;



    @GetMapping(path="/all")
    public @ResponseBody Iterable<Photo> getAllPhotos() {
        // This returns a JSON or XML with the users
        return photosRepository.findAll();
    }
    
    @GetMapping(path="/test")
    public String getTemp() {
        // This returns a JSON or XML with the users
        return "ss";
    }

    @GetMapping(path="/userDetails/{id}")
    public ResponseEntity getUserDetails(@PathVariable int id) {
        // This returns a JSON or XML with the users
        User user = userRepository.findByIdEquals(id);
        if(user.getId() == null)
        {
            return ResponseEntity
                    .status(HttpStatus.FORBIDDEN)
                    .body("User not Found");
        }
        return ResponseEntity.ok(user);
    }

    @GetMapping(path="/{category}")
    public @ResponseBody Iterable<Photo> getCatPhotos(@PathVariable String category) {
        // This returns a JSON or XML with the users
        return photosRepository.findByCategoryEquals(category);
    }

//    @PostMapping("/updateLikes") // //new annotation since 4.3
//    public ResponseEntity updateLikes(@RequestParam("userID") int userID
//                                           @RequestParam("likes") int likes,
//                                           @RequestParam("dislikes") int dislikes) {
//
//    }



    @PostMapping("/upload") // //new annotation since 4.3
    public ResponseEntity singleFileUpload(@RequestParam("file") MultipartFile file,
                                           @RequestParam("category") String category,
                                           @RequestParam("userID") int userID) {

        if (file.isEmpty()) {
            return ResponseEntity
                    .status(HttpStatus.FORBIDDEN)
                    .body("No Image Found");
        }

        Photo n = new Photo();


        n.setCategory(category);
        n.setuserID(userID);
        n.setLink(UPLOADED_FOLDER);
        photosRepository.save(n);

        int id = n.getId();
        // System.out.println("----------Working Directory------------- = " + System.getProperty("user.dir"));

        String file_ext = file.getOriginalFilename().split("\\.", -1)[1]; ;
        String file_name = Integer.toString(id) + "." + file_ext;

        
        String uploadStatus = "";

        try {

            // Get the file and save it somewhere

            byte[] bytes = file.getBytes();
            Path path = Paths.get(UPLOADED_FOLDER + file_name);
            Files.write(path, bytes);

            uploadStatus = "You successfully uploaded '" + file_name + "'";

        } catch (IOException e) {
            e.printStackTrace();
        }

        String fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()
                .path("photos/get-image/")
                .path(file_name)
                .toUriString();
        
        n.setLink(fileDownloadUri);
        photosRepository.save(n);
        
        return ResponseEntity.ok(fileDownloadUri);
    }
    
    @GetMapping(
      value = "/get-image/{imgName}",
      produces = MediaType.IMAGE_JPEG_VALUE
    )
    public ResponseEntity getImageWithMediaType(@PathVariable String imgName) throws IOException {
        Path path = Paths.get(UPLOADED_FOLDER + imgName);
        Resource resource = null;

        try {
            resource = new UrlResource(path.toUri());
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }

        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(MediaType.IMAGE_JPEG_VALUE))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                .body(resource);
    }
    
}
