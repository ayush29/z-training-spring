package com.ayush.ztrainingspring.photos;

import com.ayush.ztrainingspring.order.restaurants.Restaurantrepo;
import com.ayush.ztrainingspring.order.restaurants.Restaurants;
import com.ayush.ztrainingspring.user_auth.User;
import com.ayush.ztrainingspring.user_auth.UserRepository;
import com.ayush.ztrainingspring.photos.Photo;
import com.ayush.ztrainingspring.photos.PhotosRepository;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;
import java.sql.Timestamp;
import java.time.Instant;

@Service
public class PhotosService {

    @Autowired // This means to get the bean called PhotosRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PhotosRepository photosRepository;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private Restaurantrepo restaurantRepo;

    private static String UPLOADED_FOLDER = "photos_storage/";


    public List<Photo> getAllPhotosServ(int restaurantId) {

        Restaurants restaurant = restaurantRepo.findById(restaurantId).orElse(null);
        if(restaurant != null) {
            return photosRepository.findByRestaurant(restaurant);
        }
        else{
            System.out.println("Restaurant not found!!!");
            return null;
        }
    }

    public List<Photo> getCatPhotosServ(int restId, String category) {

        Restaurants restaurant = restaurantRepo.findById(restId).orElse(null);
        if(restaurant != null) {
            return photosRepository.findByRestaurantAndCategory(restaurant, category);
        }
        else{
            System.out.println("Restaurant not found!!!");
            return null;
        }
    }

    public Photo updateLikesDislikesServ(int id, String colName){

        Photo oldE = photosRepository.findByIdEquals(id);
        Photo newE = new Photo(oldE);

        if(colName.equals("like"))
        {
            newE.IncLikes();
        }
        else if(colName.equals("dislike"))
        {
            newE.IncDislikes();
        }
        else
        {
            return null;
        }
        photosRepository.save(newE);
        return newE;
    }

    public User getUserDetailsServ(int userID) {

        User user = userRepository.findByIdEquals(userID);
        if(user.getId() != null)
        {
            return user;
        }
        return null;
    }

    public String singleFileUploadServ(MultipartFile file,
                                       String category,
                                       int restID,
                                       int userID) {

        String urlString = "";
        if (file.isEmpty()) {
            return urlString;
        }

        Photo n = new Photo();

        Restaurants restaurant = restaurantRepo.findById(restID).orElse(null);
        User user = userRepository.findById(userID).orElse(null);

        if(restaurant == null || user == null)
        {
            System.out.println("Restaurant/USer not found!!!");
            return urlString;
        }

        n.setTimeAdded(Timestamp.from(Instant.now()));
        n.setCategory(category);
        n.setUser(user);
        n.setRestaurant(restaurant);
        n.setLink("UPLOADED_FOLDER");

        photosRepository.save(n);

        int id = n.getId();
        // System.out.println("----------Working Directory------------- = " + System.getProperty("user.dir"));

        String file_ext = file.getOriginalFilename().split("\\.", -1)[1]; ;
        String file_name = Integer.toString(id) + "." + file_ext;


        String uploadStatus = "";
        
        File directory = new File(UPLOADED_FOLDER);
        if (! directory.exists()){
            directory.mkdir();
        }
    

        try {

            // Get the file and save it somewhere

            byte[] bytes = file.getBytes();
            Path path = Paths.get(UPLOADED_FOLDER + file_name);
            Files.write(path, bytes);

            uploadStatus = "You successfully uploaded '" + file_name + "'";

        } catch (IOException e) {
            e.printStackTrace();
        }

        String fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()
                .path("photos/get-image/")
                .path(file_name)
                .toUriString();

        n.setLink(fileDownloadUri);
        photosRepository.save(n);

        return fileDownloadUri;
    }

    public Resource getImageWithMediaTypeServ(String imgName){

        Path path = Paths.get(UPLOADED_FOLDER + imgName);
        Resource resource = null;

        try {
            resource = new UrlResource(path.toUri());
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }

        return resource;
    }

//
//    public List<Photo> getCategoryPhotos(int restaurantId, String category) {
//        Restaurants restaurant = isRestaurantIdValid(restaurantId);
//        return PhotosRepository.findByRestaurantAndCategory(restaurant, category);
//    }
}

